[main]

#authc默认是/login.jsp
authc.loginUrl=/login
roles.unauthorizedUrl=/unauthorized
perms.unauthorizedUrl=/unauthorized
logout.redirectUrl=/login

credentialsMatcher=com.github.shiro.credentials.RetryLimitHashedCredentialsMatcher
credentialsMatcher.hashAlgorithmName=md5
credentialsMatcher.hashIterations=2
credentialsMatcher.storedCredentialsHexEncoded=true

#会话管理器（自行维护会话，直接废弃了 Servlet 容器的会话管理）
##sessionManager=org.apache.shiro.session.mgt.DefaultSessionManager
##sessionManager=org.apache.shiro.web.session.mgt.ServletContainerSessionManager
sessionManager=org.apache.shiro.web.session.mgt.DefaultWebSessionManager

#会话cookie
sessionIdCookie=org.apache.shiro.web.servlet.SimpleCookie
sessionIdCookie.name=sid
##sessionIdCookie.domain=sishuok.com
##sessionIdCookie.path=
sessionIdCookie.maxAge=1800
sessionIdCookie.httpOnly=true
sessionManager.sessionIdCookieEnabled=true
sessionManager.sessionIdCookie=$sessionIdCookie


##设置会话监听器
sessionListener1=com.github.shiro.session.listener.MySessionListener1
sessionListener2=com.github.shiro.session.listener.MySessionListener2
sessionManager.sessionListeners=$sessionListener1,$sessionListener2

#设置会话存储/持久化
##sessionDAO=org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO
#因为继承了 CachingSessionDAO,在读取时会先查缓存中是否存在，如果找不到才到数据库中查找
sessionDAO=com.github.shiro.session.dao.ShiroSessionDAO
#设置会话缓存器名称（默认）
sessionDAO.activeSessionsCacheName=shiro-activeSessionCache
#设置会话ID生成器（默认）
sessionIdGenerator=org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator
sessionDAO.sessionIdGenerator=$sessionIdGenerator
sessionManager.sessionDAO=$sessionDAO
securityManager.sessionManager=$sessionManager


#设置会话的全局过期时间（毫秒为单位），默认 30 分钟
sessionManager.globalSessionTimeout=1800000
#是否开启会话验证调度器
sessionManager.sessionValidationSchedulerEnabled=true
#会话验证调度器-默认，jdk
##sessionValidationScheduler=org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler
##sessionValidationScheduler.interval=100000
##sessionValidationScheduler.sessionManager=$sessionManager
#会话验证调度器-quartz
##sessionValidationScheduler=org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler
##sessionValidationScheduler.sessionValidationInterval = 10000
##sessionValidationScheduler.sessionManager=$sessionManager
#会话验证调度器-自定义
sessionValidationScheduler=com.github.shiro.session.scheduler.MySessionValidationScheduler
sessionValidationScheduler.interval=10000
sessionValidationScheduler.sessionManager=$sessionManager

sessionManager.sessionValidationScheduler=$sessionValidationScheduler
sessionManager.deleteInvalidSessions=true

#会话工厂
sessionFactory=com.github.shiro.session.factory.OnlineSessionFactory
sessionManager.sessionFactory=$sessionFactory

securityManager.subjectDAO.sessionStorageEvaluator.sessionStorageEnabled=false

userRealm=com.github.shiro.realm.UserRealm
userRealm.credentialsMatcher=$credentialsMatcher
#启用缓存，默认false
userRealm.cachingEnabled=true
#启用身份验证缓存，默认false
userRealm.authenticationCachingEnabled=true
#缓存身份验证的缓存名称
userRealm.authenticationCacheName=authenticationCache
#启用授权信息缓存，默认false
userRealm.authorizationCachingEnabled=true
#缓存授权信息的缓存名称
userRealm.authorizationCacheName=authorizationCache
securityManager.realms=$userRealm

#缓存管理器，用于管理缓存的，此处使用 Ehcache 实现
cacheManager=org.apache.shiro.cache.ehcache.EhCacheManager
cacheManager.cacheManagerConfigFile=classpath:ehcache.xml
securityManager.cacheManager=$cacheManager

[filters]
filter1=com.github.shiro.filter.MyOncePerRequestFilter
filter2=com.github.shiro.filter.MyAdviceFilter
filter3=com.github.shiro.filter.MyPathMatchingFilter
filter4=com.github.shiro.filter.MyAccessControlFilter
filter5=com.github.shiro.filter.FormLoginFilter
filter6=com.github.shiro.filter.AnyRolesFilter

#在线状态会话过滤器
online=com.github.shiro.session.filter.OnlineSessionFilter
online.forceoutUrl=/login.jsp
online.sessionDAO=$sessionDAO

[users]
rambo=123456

[roles]
admin=user:*,menu:*

#支持通配符，拦截器声明顺序即匹配顺序，格式：url=拦截器[参数]，拦截器[参数]
#anon:支持匿名访问；authc：支持身份认证访问；role[admin]：支持角色认证访问；perms["user:create"]：支持权限认证访问
[urls]
/login=anon
/logout=anon
/unauthorized=anon
/static/**=anon
/index=authc
/user=authc,roles[admin]
#roles 通过参数指定访问时需要的角色，如“[admin]”，如果有多个使用“，”分割，且验证时是 hasAllRole 验证，即且的关系。
/role=authc,roles[admin]
/permission=authc,perms["user:create"]
/once=filter1
/advice=filter2
/path=filter3[admin,user]
/access=filter4
/formlogin=filter5
/anyrole=filter6[admin,user]