<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
	<!-- 项目名称 -->
	<display-name>myshiro</display-name>
	<!-- 项目描述 -->
	<description></description>
	<!-- 是否可以分布式处理 -->
	<!-- <distributable/> -->

	<!-- web.xml 的加载顺序是：ServletContext -> context-param -> listener -> filter -> servlet -->

	<!-- 设置项目根路径，本项目中 log4j 会读取此属性来动态创建 log 文件目录 -->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>webapp.root</param-value>
	</context-param>
	<!-- 日志记录 -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j.properties</param-value>
	</context-param>
	<!--spring 默认刷新 log4j 配置文件的间隔,单位：毫秒,生产环境设为0 -->
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>0</param-value>
	</context-param>
	<!-- 加载 spring-*.xml 配置文件 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath*:spring-context.xml,
			classpath*:mybatis-context.xml,
			classpath*:spring-mybatis.xml,
			classpath*:spring-cache.xml,
			classpath*:spring-shiro-web.xml,
			classpath*:spring-validator.xml
		</param-value>
	</context-param>
	<!-- shiro_V_1.2+环境配置，可以使用 xml 进行配置 -->
	
	<!-- <context-param> -->
        <!-- <param-name>shiroEnvironmentClass</param-name> -->
        <!-- 默认先从 /WEB-INF/shiro.ini，如果没有找 classpath:shiro.ini -->
        <!-- <param-value>org.apache.shiro.web.env.IniWebEnvironment</param-value> -->
        <!-- 自定义环境配置类 -->
        <!-- 
        <param-value>com.github.shiro.resolver.MyIniWebEnvironment</param-value>
         -->
    <!-- </context-param> -->
    <!-- <context-param> -->
        <!-- <param-name>shiroConfigLocations</param-name> -->
        <!-- <param-value> -->
        	<!-- classpath:shiro/shiro.ini -->
        	<!-- 
        	classpath:shiro/shiro-basicfilterlogin.ini
        	classpath:shiro/shiro-formfilterlogin.ini
        	 -->
        <!-- </param-value> -->
    <!-- </context-param> -->
    

	<!-- spring 字符集过滤器 -->
	<filter>
		<filter-name>SpringEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<async-supported>true</async-supported>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>SpringEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- shiro 安全控制入口，对应 spring 配置中的 shiroFilter -->
	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<!-- 
	<filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>org.apache.shiro.web.servlet.ShiroFilter</filter-class>
    </filter>
	 -->
    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

	<!--spring 监听器的配置，用于在启动 Web 容器时，自动装配 ApplicationContext 的配置信息 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 防止 spring 内存溢出监听器 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	<!--spring log4j 监听器 -->
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	<!-- 提供 SecurityManager 及依赖。ShiroFilter 会自动找到 Environment 然后获取相应依赖 -->
	<!-- 通过它来创建相应的  WebEnvironment，并自动绑定到 ServletContext，默认使用 IniWebEnvironment 实现 -->
	<!-- 
	<listener>
		<listener-class>org.apache.shiro.web.env.EnvironmentLoaderListener</listener-class>
	</listener>
	 -->

	<!-- SpringMVC 核心配置 -->
	<servlet>
		<servlet-name>spring-mvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath*:spring-mvc.xml</param-value>
		</init-param>
		<!-- 控制 servlet 的加载顺序 -->
		<load-on-startup>0</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
	<servlet-mapping>
		<servlet-name>spring-mvc</servlet-name>
		<!-- 此处可以可以配置成 *.do，对应 struts 的后缀习惯，/表示拦截所有请求，以致无法访问静态资源 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- 确保静态资源可以被访问 -->
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.html</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.txt</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.css</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.js</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.swf</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.gif</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.jpg</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.png</url-pattern>
	</servlet-mapping>

	<!-- 设置 session 超时时间，单位：分钟 -->
	<session-config>
		<session-timeout>30</session-timeout>
	</session-config>

	<!-- shiro 会话过期跳转页面 -->
	<!-- 
	<error-page>
		<exception-type>org.apache.shiro.session.InvalidSessionException</exception-type>
		<location>/WEB-INF/errorpage/invalid_session.jsp</location>
	</error-page>
	 -->
</web-app>