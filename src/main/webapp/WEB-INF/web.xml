<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
	<!-- 项目名称 -->
	<display-name>myshiro</display-name>
	<!-- 项目描述 -->
	<description></description>
	<!-- 是否可以分布式处理 -->
	<!-- <distributable/> -->

	<!-- web.xml 的加载顺序是：ServletContext -> context-param -> listener -> filter 
		-> servlet -->
	<!-- 设置项目根路径，本项目中log4j会读取此属性来动态创建log文件目录 -->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>webapp.root</param-value>
	</context-param>
	<!-- 日志记录 -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j.properties</param-value>
	</context-param>
	<!--Spring默认刷新Log4j配置文件的间隔,单位：毫秒,生产环境设为0 -->
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>0</param-value>
	</context-param>
	<!-- 加载Spring-*XML配置文件 -->
	<context-param>
		<param-name>contextConfigLocation </param-name>
		<param-value>
			classpath*:spring-context.xml,
			classpath*:mybatis-context.xml,
			classpath*:spring-mybatis.xml,
			classpath*:spring-validator.xml
		</param-value>
	</context-param>
	<!-- shiro1.2+V环境配置 -->
	<context-param>
        <param-name>shiroEnvironmentClass</param-name>
        <!-- 默认先从/WEB-INF/shiro.ini，如果没有找classpath:shiro.ini -->
        <param-value>org.apache.shiro.web.env.IniWebEnvironment</param-value>
    </context-param>
    <context-param>
        <param-name>shiroConfigLocations</param-name>
        <param-value>
        	classpath:shiro/shiro.ini
        	<!-- 
        	classpath:shiro/shiro-basicfilterlogin.ini
        	classpath:shiro/shiro-formfilterlogin.ini
        	 -->
        </param-value>
    </context-param>

	<!-- Spring字符集过滤器 -->
	<filter>
		<filter-name>SpringEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<async-supported>true</async-supported>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>SpringEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- shiro安全控制入口 -->
	<!-- 
	<filter>
		<filter-name>ShiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>ShiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	 -->
	<filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>org.apache.shiro.web.servlet.ShiroFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

	<!--Spring监听器的配置，用于在启动Web容器时，自动装配ApplicationContext的配置信息 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 防止Spring内存溢出监听器 -->
	<listener>
		<listener-class>
			org.springframework.web.util.IntrospectorCleanupListener
		</listener-class>
	</listener>
	<!--Spring Log4j监听器 -->
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	<!-- 提供SecurityManager及依赖。ShiroFilter会自动找到Environment然后获取相应依赖 -->
	<!-- 通过它来创建相应的 WebEnvironment，并自动绑定到ServletContext，默认使用IniWebEnvironment实现 -->
	<listener>
		<listener-class>org.apache.shiro.web.env.EnvironmentLoaderListener</listener-class>
	</listener>

	<!-- SpringMVC核心配置 -->
	<servlet>
		<servlet-name>spring-mvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath*:spring-mvc.xml</param-value>
		</init-param>
		<!-- 控制servlet的加载顺序 -->
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
	<servlet-mapping>
		<servlet-name>spring-mvc</servlet-name>
		<!-- 此处可以可以配置成*.do，对应struts的后缀习惯，/表示拦截所有请求 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- 确保静态资源可以被访问 -->
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.html</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.txt</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.css</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.js</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.swf</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.gif</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.jpg</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.png</url-pattern>
	</servlet-mapping>

	<!-- 设置 session 超时时间，单位：分钟 -->
	<session-config>
		<session-timeout>30</session-timeout>
	</session-config>
</web-app>